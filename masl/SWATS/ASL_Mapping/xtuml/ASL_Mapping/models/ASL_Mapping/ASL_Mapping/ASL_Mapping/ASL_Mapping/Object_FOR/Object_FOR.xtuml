// BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

within ASL_Mapping::ASL_Mapping::ASL_Mapping::ASL_Mapping is

	//!  This object verifies the FOR statement.
	@key_letters("objFOR");
	@class_num(3);
	class Object_FOR is

		//!  Preferred identifier.
		ReferenceFOR: integer;

		//!  This attribute is manipulated to indicated that the required operation was successful.
		ResultA: integer;

		preferred identifier is (ReferenceFOR);

		//!  Function to do the FOR tests.
		@dialect("asl");
		@operation_num(1);
		class operation do_for_test(Test_Start: in integer, Final_Test: out integer) is
			@noparse
			#------------------------------------------------------------------------#
			#
			# FOR Tests
			#
			# The ASL <for> loop statement shall be supported
			# 1103-0000-01-0431
			#
			# Break from and ASL <for> loop statement shall be supported
			# 1103-0000-01-0432
			#
			#------------------------------------------------------------------------#
			
			#------------------------------------------------------------------------#
			#Create several instances of the Object_FOR
			#------------------------------------------------------------------------#
			
			   Count = 1
			   Has_Failed = FALSE
			
			   loop
			      newFOR = create unique Object_FOR with ResultA = 0
			      Count = Count + 1
			      breakif Count > 5
			   endloop
			
			   Test = Test_Start
			
			#------------------------------------------------------------------------#
			# Test 1 - FOR instance count
			#------------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "FOR instance count"]
			
			   Count = 0
			
			   {all_instances_of_FOR} = find-all Object_FOR
			
			   for each_instance in {all_instances_of_FOR} do
			      each_instance.ResultA = 10
			      Count = Count + 1
			   endfor
			
			   # Verify that the total number of instance affect was FIVE.
			   if  Count != 5 then
			      [] = RPT3:Test_Failed["objFOR", Test, Count]
			      Has_Failed = TRUE
			   else
			      [] = RPT2:Test_Passed["objFOR", Test, Count]
			   endif
			
			   Test = Test + 1
			
			# End Test 1
			
			#------------------------------------------------------------------------#
			# Test 2 - FOR with BREAKIF
			#------------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "FOR with BREAKIF"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]
			
			   Count = 0
			
			   for each_instance in {all_instances_of_FOR} do
			      each_instance.ResultA = 20
			      Count = Count + 1
			      breakif Count = 2
			   endfor
			
			   # Verify that the total number of instance affect was TWO.
			   if  Count != 2 then
			      [] = RPT3:Test_Failed["objFOR", Test, Count]
			      Has_Failed = TRUE
			   else
			      [] = RPT2:Test_Passed["objFOR", Test, Count]
			   endif
			
			   Test = Test + 1
			
			# End Test 2
			
			#------------------------------------------------------------------------#
			# Test 3 - FOR with BREAK, break after affecting one instance
			#------------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "Break after once instance"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]
			
			   Count = 0
			
			   for each_instance in {all_instances_of_FOR} do
			      each_instance.ResultA = 30
			      Count = Count + 1
			      break
			   endfor
			
			   # Verify that the total number of instance affect was ONE.
			   if  Count != 1 then
			      [] = RPT3:Test_Failed["objFOR", Test, Count]
			      Has_Failed = TRUE
			   else
			      [] = RPT2:Test_Passed["objFOR", Test, Count]
			   endif
			
			   Test = Test + 1
			
			# End Test 3
			
			#------------------------------------------------------------------------#
			# Test 4 - FOR with BREAK, break before affecting any instance
			#------------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "FOR test break before affecting any instance"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]
			
			   Count = 0
			
			   for each_instance in {all_instances_of_FOR} do
			      break
			      each_instance.ResultA = 40
			      Count = Count + 1
			   endfor
			
			   # Verify that the total number of instance affect was ZERO.
			   if  Count != 0 then
			      [] = RPT3:Test_Failed["objFOR", Test, Count]
			      Has_Failed = TRUE
			   else
			      [] = RPT2:Test_Passed["objFOR", Test, Count]
			   endif
			
			   Test = Test + 1
			
			# End Test 4
			
			#------------------------------------------------------------------------#
			# Verify FOR with BREAK, break before affecting any instance
			# Test 4.1
			#------------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "FOR test verify test"]
			
			   # Verify that the attribute Result1 does not equal 40.
			
			   Has_Failed = FALSE
			   last_failed_result = 0
			
			   for each_instance in {all_instances_of_FOR} do
			
			      if each_instance.ResultA = 40 then
			         Has_Failed = TRUE
			         last_failed_result = each_instance.ResultA
			      endif
			
			   endfor
			
			   if not Has_Failed then
			      [] = RPT2:Test_Passed["objFOR", Test, 0]
			   else
			      [] = RPT3:Test_Failed["objFOR", Test, last_failed_result]
			   endif
			
			   Test = Test + 1
			
			# End Test 5
			
			#------------------------------------------------------------------------#
			# Test 6 - FOR with BREAKIF inside another logical statement
			#------------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "BREAKIF inside a logical statement"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]
			
			   Count = 0 
			
			   for each_instance in {all_instances_of_FOR} do
			
			      if Count != 3 then
			         breakif Count > 2
			      endif
			
			      each_instance.ResultA = 50
			      Count = Count + 1
			
			   endfor
			
			   # Verify that the total number of instance affect was FOUR.
			   if  Count != 4 then
			      [] = RPT3:Test_Failed["objFOR", Test, Count]
			      Has_Failed = TRUE
			   else
			      [] = RPT2:Test_Passed["ObjFOR", Test, Count]
			   endif
			
			   Test = Test + 1
			
			# End Test 6
			
			#------------------------------------------------------------------------#
			# Test 7 - FOR with BREAK inside another logical statement
			#------------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "BREAKIF inside another logical statement"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]
			
			   Count = 0
			
			   for each_instance in {all_instances_of_FOR} do
			
			      if Count = 3 then
			         break
			      endif
			
			      each_instance.ResultA = 60
			      Count = Count + 1
			
			   endfor
			
			   # Verify that the total number of instance affect was THREE.
			   if  Count != 3 then
			      [] = RPT3:Test_Failed["objFOR", Test, Count]
			      Has_Failed = TRUE
			   else
			      [] = RPT2:Test_Passed["objFOR", Test, Count]
			   endif
			
			   Test = Test + 1
			
			# End Test 7
			
			#------------------------------------------------------------------------#
			# Test 8 - After a FOR loop check that the loop variable is still valid
			#------------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "objFOR", "FOR loop check variable is still valid"]
			
			   # Check that the previously used loop variable is still valid
			   if each_instance = UNDEFINED then
			      [] = RPT3:Test_Failed["objFOR", Test, -1]
			      Has_Failed = TRUE
			   else
			      each_instance.ResultA = 70
			      [] = RPT2:Test_Passed["objFOR", Test, each_instance.ResultA]
			   endif
			
			   Test = Test + 1
			
			# End Test 8
			
			#------------------------------------------------------------------------#
			
			Final_Test = Test
			@endnoparse
		end operation;

	end class;

end;

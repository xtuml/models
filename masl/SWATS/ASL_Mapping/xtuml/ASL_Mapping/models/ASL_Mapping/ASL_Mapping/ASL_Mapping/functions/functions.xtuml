// BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

within ASL_Mapping::ASL_Mapping::ASL_Mapping is

	package functions is
		@dialect("asl");
		@function_num(12);
		function And_Or_Checks(Test_No: in integer, Returning_No: out integer) is
			@noparse
			#-------------------------------------------------------------------#
			#
			# Logical operators AND and OR within if statements
			#
			#
			#
			#
			#
			#
			#
			#
			#
			#
			#
			#
			#
			#-------------------------------------------------------------------#
			
			Test = Test_No
			
			#-------------------------------------------------------------------#
			# Test 1 - Check if AND then with boolean values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if AND then"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
			
			   Bool1 = TRUE
			   Bool2 = TRUE
			
			   if Bool1 and Bool2 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 1
			
			#-------------------------------------------------------------------#
			# Test 2 - Check if AND then with integer values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if AND then"]
			
			   Val1 = 10
			   Val2 = 20
			
			   if Val1 = 10 and Val2 = 20 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 2
			
			#-------------------------------------------------------------------#
			# Test 3 - Check if AND then with boolean values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if AND then"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]
			
			   Bool1 = TRUE
			   Bool2 = FALSE
			
			   if Bool1 and not Bool2 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 3
			
			#-------------------------------------------------------------------#
			# Test 4 - Check if AND then else with integer values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if AND then"]
			
			   Val1 = 10
			   Val2 = 20
			
			   if Val1 = 10 and Val2 = 10 then
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   else
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   endif
			
			   Test = Test + 1
			
			# End Test 5
			
			#-------------------------------------------------------------------#
			# Test 5 - Check if OR then with boolean values
			#-------------------------------------------------------------------#
			
			    [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]
			    [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
			
			    Bool1 = TRUE
			    Bool2 = FALSE
			
			    if Bool1 or Bool2 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 5
			
			
			#-------------------------------------------------------------------#
			# Test 6 - Check if OR then with boolean values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]
			
			
			   Bool1 = TRUE
			   Bool2 = TRUE
			
			   if Bool1 or Bool2 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 6
			
			
			#-------------------------------------------------------------------#
			# Test 7 - Check if OR then with integer values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]
			
			   Val1 = 10
			   Val2 = 20
			
			   if Val1 = 10 or Val2 = 10 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 7
			
			#-------------------------------------------------------------------#
			# Test 8 - Check if OR then with integer values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]
			
			   Val1 = 10
			   Val2 = 20
			
			   if Val1 = 20 or Val2 = 20 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 8
			
			
			#-------------------------------------------------------------------#
			# Test 9 - Check if OR then else with boolean values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
			
			   Bool1 = FALSE
			   Bool2 = FALSE
			
			   if Bool1 or Bool2 then
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   else
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   endif
			
			   Test = Test + 1
			
			# End Test 9
			
			#-------------------------------------------------------------------#
			# Test 10 - Check if & then with integer values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical AND then"]
			
			   Val1 = 10
			   Val2 = 20
			
			   if Val1 = 10 & Val2 = 20 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 10
			
			
			#-------------------------------------------------------------------#
			# Test 11 - Check if & then with boolean values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical AND then"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]
			
			   Bool1 = TRUE
			   Bool2 = FALSE
			
			   if Bool1 & not Bool2 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 11
			
			#-------------------------------------------------------------------#
			# Test 12 - Check if & then else with boolean values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical AND then"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
			
			   Bool1 = FALSE
			   Bool2 = FALSE
			
			   if Bool1 & Bool2 then
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   else
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   endif
			
			   Test = Test + 1
			
			# End Test 12
			
			#-------------------------------------------------------------------#
			# Test 13 - Check if | then with integer values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical OR then"]
			
			   Val1 = 10
			   Val2 = 20
			
			   if Val1 = 10 | Val2 = 10 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 13
			
			#-------------------------------------------------------------------#
			# Test 14 - Check if & then else with boolean values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical AND then"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]
			
			   Bool1 = TRUE
			   Bool2 = FALSE
			
			   if not Bool1 & Bool2 then
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]     
			   else
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   endif
			
			   Test = Test + 1
			
			# End Test 14
			
			#-------------------------------------------------------------------#
			# Test 15 - Check if | then else with boolean values
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical OR then"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
			   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]
			
			   Bool1 = TRUE
			   Bool2 = FALSE
			
			   if not Bool1 | Bool2 then
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]     
			   else
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   endif
			
			   Test = Test + 1
			
			# End Test 15
			
			#-------------------------------------------------------------------#
			
			Returning_No = Test
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(10);
		function Check_Base_Types(Test: in integer, Returning_No: out integer) is
			@noparse
			#------------------------------------------------------------------
			# The architecture should be able to support Real, Integer, Boolean
			# and Text base types. This test assigns appropriates values to 
			# variables and then reads them back to make sure that these values
			# have been correctly assigned
			#------------------------------------------------------------------
			
			   Local_Test = Test
			
			   The_Real_Type    = 23.12345
			   The_Integer_Type = 12345
			   The_String_Type  = "The Cat Sat On The Mat"
			   The_Boolean_Type = TRUE
			
			   objDV = create Default_Vals with The_Integer     = 0     &\
			                                    The_Real        = 0.0   &\
			                                    The_Text        = " "    &\
			                                    The_Boolean     = FALSE
			
			   objDV.The_Real    = The_Real_Type
			   objDV.The_Integer = The_Integer_Type
			   objDV.The_Text    = The_String_Type
			   objDV.The_Boolean = The_Boolean_Type
			
			   [] = RPT1:Start_Test[Local_Test, "1241-0000-01-0105", "ASL Mapping", "Check Base types", "Check that base types are correct"]
			   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0106"]
			   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0107"]
			   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0110"]
			
			   if objDV.The_Real = 23.12345 then
			
			      if objDV.The_Integer = 12345 then
			
			         if objDV.The_Text = "The Cat Sat On The Mat" then
			
			            if objDV.The_Boolean then
			               [] = RPT2:Test_Passed["Basic ASL", Local_Test, 0]
			            else
			               [] = RPT3:Test_Failed["Basic ASL", Local_Test, -10]
			            endif
			
			         else
			            [] = RPT3:Test_Failed["Basic ASL", Local_Test, -30]
			         endif
			
			      else
			         [] = RPT3:Test_Failed["Basic ASL", Local_Test, -40]
			      endif
			
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Local_Test, -50]
			   endif
			
			   Local_Test = Local_Test + 1
			
			# End Test 1
			
			#------------------------------------------------------------------
			# Test 2 - Test the Time Of Day attribute
			#------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Local_Test, "1241-0000-01-0108", "ASL Mapping", "Check Base types", "Check Time Of Day Attribute"]
			   [] = RPT5:Test_Text [Local_Test, "Time Of Day attribute is"]
			   [] = RPT5:Test_Text [Local_Test, "unsupported by the WACA"]
			
			   [] = RPT4:Test_Unsupported[Local_Test]
			
			   Local_Test = Local_Test + 1
			
			#------------------------------------------------------------------
			# Test 3 - 
			#------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Local_Test, "Null Requid", "ASL Mapping", "Check Base types", "Check Attribute comparison"]
			
			   instA = create ObjectA with The_Int1 = 1 & The_Int2 = 2
			   instB = create ObjectB with The_IntB1 = 1 & The_IntB2 = 2
			
			   if instA.The_Int1 = instB.The_IntB1 then
			      [] = RPT2:Test_Passed["Comp", Local_Test, 0]
			   else
			      [] = RPT3:Test_Failed["Comp", Local_Test, -10]
			   endif
			
			   Local_Test = Local_Test + 1
			
			#------------------------------------------------------------------
			# Test 4 - 
			#------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Local_Test, "Null Requid", "ASL Mapping", "Check Base types", "Check Attribute comparison"]
			
			   if instA.The_Int1 != instA.The_Int2 then
			      [] = RPT2:Test_Passed["Comp", Local_Test, 0]
			   else
			      [] = RPT3:Test_Failed["Comp", Local_Test, -10]
			   endif
			
			   Local_Test = Local_Test + 1
			
			#------------------------------------------------------------------
			# Test 4 - 
			#------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Local_Test, "Null Requid", "ASL Mapping", "Check Base types", "Check Attribute comparison"]
			
			   if instA.The_Int1 != instA.The_Int2 then
			      [] = RPT2:Test_Passed["Comp", Local_Test, 0]
			   else
			      [] = RPT3:Test_Failed["Comp", Local_Test, -10]
			   endif
			
			   Local_Test = Local_Test + 1
			
			#------------------------------------------------------------------
			# Test 5 - 
			#------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Local_Test, "Null Requid", "ASL Mapping", "Check Base types", "Check Attribute comparison"]
			
			   if instA.The_Int2 = instB.The_IntB2 then
			      [] = RPT2:Test_Passed["Comp", Local_Test, 0]
			   else
			      [] = RPT3:Test_Failed["Comp", Local_Test, -10]
			   endif
			
			   Local_Test = Local_Test + 1
			
			# End Test 2
			
			Returning_No = Local_Test
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(14);
		function Check_Continuation(Test_No: in integer, Returning_No: out integer) is
			@noparse
			#-------------------------------------------------------------------#
			#
			# Line Continuation character check
			#
			# The use of the line continuation '\' character placed at the end
			# of a line to indicate that a following line is to be included as
			# part of the same ASL statement shall be supported
			# 1103-0000-01-0313
			#
			#-------------------------------------------------------------------#
			
			   Test = Test_No
			
			#-------------------------------------------------------------------#
			# Test 1 - Check multi line statments
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0313", "ASL Mapping", "Comment Checks", "Check multi line statement"]
			
			   Val1 = 10
			   Val2 = 20
			   
			   Val1 = Val1 + \
			          Val2
			
			   if Val1 = 30 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 1
			
			#-------------------------------------------------------------------#
			# Test 2 - Check multi line statments
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0313", "ASL Mapping", "Comment Checks", "Check multi line statement"]
			
			   Val1 = 10
			   Val2 = 20
			   Val3 = 30
			
			   Val1 = \
			          Val1 +\ 
			          Val2 + \
			          Val3
			
			   if Val1 = 60 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			   
			# End Test 2
			
			Returning_No = Test
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(11);
		function Check_Defaults(Test: in integer, Returning_No: out integer) is
			@noparse
			#----------------------------------------------------------------------------------
			# Check that variables are set default values on initialisation
			#----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0311", "ASL Mapping", "Check Default Values","Check default values"]
			
			   [] = RPT4:Test_Unsupported[Test]
			
			   [Host] = WAW1:What_Env[]
			   if Host = "ISIM" then
			      Supported = FALSE
			   else
			      Supported = TRUE
			   endif
			
			   Set_Vals = FALSE
			
			   if Set_Vals then
			
			      if Supported then
			         The_Real_Default = 1.0
			         The_Integer_Default = 1
			         The_Text_Default = "Goodbye"
			         The_Boolean_Default = TRUE
			      else
			         The_Real_Default = 0.0
			         The_Integer_Default = 0
			         The_Text_Default = "Goodbye"
			         The_Boolean_Default = TRUE
			      endif
			
			   endif
			
			   if The_Real_Default = 1.0 then
			 
			      if The_Integer_Default = 1 then
			
			         if The_Text_Default = "                                " then
			
			            if not The_Boolean_Default then
			              [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			            else
			              [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			            endif
			
			         else
			            [] = RPT3:Test_Failed["Basic ASL", Test, -20]
			         endif
			
			      else
			         [] = RPT3:Test_Failed["Basic ASL", Test, -30]
			      endif
			
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -40]
			   endif
			
			Returning_No = Test + 1
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(15);
		function Check_Identifiers(Test_No: in integer, Returning_No: out integer) is
			@noparse
			Test = Test_No
			
			#-------------------------------------------------------------------#
			# Test 1 - Check that identifying attributes are picked up
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1241-0000-01-0131", "ASL Mapping", "Check identifiers", "Check identifying attributes"]
			
			   LeftObject  = create Left          with idL  = 1
			   RightObject = create Right         with idR  = 1
			   ARObject    = create Another_Right with idAR = 1
			   LRObject    = create LeftRight     with idL  = 1 &\
			                                           idR  = 1
			   
			   if LRObject.idL = 1 then
			
			      if LRObject.idR = 1 then   
			         [] = RPT2:Test_Passed["Identifying Attribute", Test, 0]
			      else
			         [] = RPT3:Test_Failed["Identifying Attribute", Test, -20]
			      endif
			
			   else
			      [] = RPT3:Test_Failed["Identifying Attribute", Test, -10]
			   endif
			
			   Test = Test + 1
			
			#-------------------------------------------------------------------#
			# Test 2 - Check that non-identifying attributes are ignored
			#          N.B. This test can only be confirmed by inspection
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1241-0000-01-0131", "ASL Mapping", "Check identifiers", "Check identifying attributes"]
			   [] = RPT5:Test_Text [Test, "Confirmed on inspection"]
			   [] = RPT2:Test_Passed["Non-Identifying Attribute", Test, 0]
			
			   Test = Test + 1
			
			# End Test 2
			
			Returning_No = Test
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(9);
		function Check_Parameters(Test: in integer, The_Subtract_Param: in integer, Returning_No: out integer) is
			@noparse
			#--------------------------------------------------
			# Check parameter ordering
			#--------------------------------------------------       
			
			   The_Result = 0
			
			   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "Basic ASL DBSS","Check parameter ordering"]
			
			   The_Result = Test - The_Subtract_Param
			
			   if The_Result >= 0 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			Returning_No = Test + 1
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(13);
		function Comment_Checks(Test_No: in integer, Returning_No: out integer) is
			@noparse
			#-------------------------------------------------------------------#
			#
			# Comment line checks
			#
			# Single and multiple line comments shall be supported
			# 1103-0000-01-1511
			#
			#-------------------------------------------------------------------#
			
			   Test = Test_No
			
			#-------------------------------------------------------------------#
			# Test 1 - Check that a single line of commented out ASL code is 
			#          not translated
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-1511", "ASL Mapping", "Comment Checks", "Check single line comment"]
			   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0110"]
			
			   Val1 = 10
			   Val2 = 20
			   
			   # Val1 = Val2
			
			   if Val1 = 10 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			
			# End Test 1
			
			#-------------------------------------------------------------------#
			# Test 2 - Check that multiple lines of commented out ASL code are 
			#          not translated
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-1511", "ASL Mapping", "Comment Checks", "Check multi line comments"]
			   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0110"]
			   Val1 = 10
			   Val2 = 20
			
			   #{
			      Val1 = 30
			      Val2 = 40
			
			      Val1 = Val2
			
			   }#
			
			   if Val1 = 10 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			   
			# End Test 2
			
			#-------------------------------------------------------------------#
			# Test 3 - This test ensures that if a hash on its own does not 
			#           comment out the line following it
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Check single hash does not comment following line"]
			   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0110"]
			
			   Count = 0
			
			   #
			   Count = Count + 1
			      
			   if Count = 1 then
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   else
			      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			   endif
			
			   Test = Test + 1
			   
			# End Test 3
			
			#-------------------------------------------------------------------#
			# Test 4 - Check long comments
			#-------------------------------------------------------------------#
			
			   [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Check long comments"]
			
			   # This comment lins was long (DNS)
			      
			   [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			
			   Test = Test + 1
			   
			# End Test 4
			
			Returning_No = Test
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(8);
		function Create_Processor(Test_Start: in integer, Processor_Id_Local: in Processor_Id_Type, Final_Test: out integer) is
			@noparse
			#-----------------------------------------------------------------------
			# The ASL timer function <Create_Timer> shall be supported
			# 1103-0000-01-1111
			#
			# The ASL <create ... with> statment to create an instance of an object
			# with attributes shall be supported
			# 1103-0000-0511
			#
			# Writing to object attributes shall be supported
			# 1103-0000-01-0521
			#
			# Reading object attribute values shall be supported
			# 1103-0000-01-0522
			#-----------------------------------------------------------------------
			
			This_Test = Test_Start
			
			[] = RPT1:Start_Test[This_Test, "1103-0000-01-0511", "ASL_Mapping", "Active Domain Service Perform Attribute assignment", "Assign all attributes"]
			[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-1111"]
			[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-0521"]
			[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-0522"]
			
			[my_timer_id_local] = Create_Timer[]
			
			my_processor = create Processor with Processor_Id = Processor_Id_Local &\
			   Background_Processing_Timer_Id = my_timer_id_local &\
			   Communications_Enabled = FALSE 
			
			my_object = find-one Processor where Processor_Id = Processor_Id_Local
			
			Failure_Code = 1
			
			if my_object != UNDEFINED then
			
			   if my_object.Background_Processing_Timer_Id = my_timer_id_local then
			
			      if my_object.Communications_Enabled = FALSE then
			
			         Failure_Code = 0
			
			      else
			
			         Failure_Code = -30
			
			      endif
			
			   else
			
			      Failure_Code = -20
			
			   endif
			
			   delete my_object
			
			else
			
			   Failure_Code = -10
			
			endif
			
			if Failure_Code = 0 then
			   [] = RPT2:Test_Passed["Attribute read", This_Test, Failure_Code]
			else
			   [] = RPT3:Test_Failed["Attribute read", This_Test, Failure_Code]
			endif
			
			This_Test = This_Test + 1
			
			Final_Test = This_Test
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(3);
		function Create_Report_Data() is
			@noparse
			# Find out of there already is one of these.
			# It is not inconceivable that a report object still exists from a previous run.
			# Report objects are not deleted at the end of a run, as certain events may
			# still be en-queued.
			
			old_report = find-one Report_Data
			
			if old_report != UNDEFINED then
			   delete old_report
			endif
			
			My_Report = create unique Report_Data with Reported_Domain_Number = 0
			
			[] = RPT6:Domain_Test_Start["ASL Mapping"]
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(4);
		function Delete_Report_Data() is
			@noparse
			[] = RPT7:Domain_Test_Finished["ASL Mapping"]
			
			# Do not delete the Report_Data object, as there may be still events in
			# the queue.
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(7);
		function Perform_Attribute_Assignment(Test_Start: in integer, Final_Test: out integer) is
			@noparse
			#-----------------------------------------------------------------------
			# The ASL <create ... with> statment to create an instance of an object
			# with attributes shall be supported
			# 1103-0000-0511
			#
			# Writing to object attributes shall be supported
			# 1103-0000-01-0521
			#
			# Reading object attribute values shall be supported
			# 1103-0000-01-0522
			#-----------------------------------------------------------------------
			
			This_Test = Test_Start
			
			[] = RPT1:Start_Test[This_Test, "1103-0000-01-0511", "ASL_Mapping", "Passive Domain Service Perform Attribute assignment", "Assign all attributes"]
			[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-0521"]
			[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-0522"]
			
			my_object = create Object_LOGIC with IntegerAttr = This_Test &\
			    TextAttr = "Hello" &\
			    BooleanAttr = FALSE &\
			    EnumerationAttr = 'Frank' &\
			    ReferenceLOGIC = This_Test 
			
			my_object = find-one Object_LOGIC where ReferenceLOGIC = This_Test
			
			Failure_Code = 1
			
			if my_object != UNDEFINED then
			
			   if my_object.TextAttr = "Hello" then
			
			      if my_object.BooleanAttr = FALSE then
			
			         if my_object.EnumerationAttr = 'Frank' then
			
			            Failure_Code = 0
			   
			         else
			
			            Failure_Code = -40
			
			         endif
			
			      else
			
			         Failure_Code = -30
			
			      endif
			
			   else
			
			      Failure_Code = -20
			
			   endif
			
			   delete my_object
			
			else
			
			   Failure_Code = -10
			
			endif
			
			if Failure_Code = 0 then
			   [] = RPT2:Test_Passed["Attribute read", This_Test, Failure_Code]
			else
			   [] = RPT3:Test_Failed["Attribute read", This_Test, Failure_Code]
			endif
			
			This_Test = This_Test + 1
			
			Final_Test = This_Test
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(6);
		function Test_Large_Numbers(Start_Test_Number: in integer, Finish_Test_Number: out integer) is
			@noparse
			This_Test_Number = Start_Test_Number
			
			[Host] = WAW1:What_Env[]
			if Host = "WACA" then
			   WACA = TRUE
			else
			   WACA = FALSE
			endif
			
			# Commented out code indicates that these ASL instructions will cause the WACA not to generate this file,
			# as an assingment of an out of range value will result in a Fatal Error during code generation.
			
			# It is conceivable that WACA could be required to actually limit the maximum and minimum values
			# to be within the correct range. This does NOT happen currently. If this changes, and WACA is
			# required to limit any range, the commented out code should be re-instated.
			
			# Maximum permissable value
			System_Maximum = 2147483647
			
			# Minimum permissable value
			System_Minimum = -2147483648
			
			#Illegal maximum value
			#Overflow_System_Maximum = 2147483648
			Overflow_System_Maximum = System_Maximum
			
			# Illegal minimum value
			#Underflow_System_Minimum = -2147483649
			Underflow_System_Minimum = System_Minimum
			
			
			# ------------------------------------------------------------------------------------------------------------
			# Test 1 - Integer Overflow Underflow
			# ------------------------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "Integer Overflow Underflow", "Test max"]
			
			   if System_Maximum = 2147483647 then
			      [] = RPT2:Test_Passed["Integer max", This_Test_Number, System_Maximum]
			   else
			      [] = RPT3:Test_Failed["Integer max", This_Test_Number, System_Maximum]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 1
			
			# ------------------------------------------------------------------------------------------------------------
			# Test 2 - Integer Overflow Underflow
			# ------------------------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "Integer Overflow Underflow", "Test min"]
			
			   if System_Minimum = -2147483648 then
			      [] = RPT2:Test_Passed["Integer max", This_Test_Number, System_Minimum]
			   else
			      [] = RPT3:Test_Failed["Integer max", This_Test_Number, System_Minimum]
			   endif
			 
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 2
			
			# ------------------------------------------------------------------------------------------------------------
			# Test 3 - Integer Overflow Underflow
			# ------------------------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "Integer Overflow Underflow", "Test constrained to max"]
			
			   # WACA should limit the Overflow_System_Maximum value to the system defined max, 
			   # since this value is outside of the defined integer range.
			
			   # Compare it to the unmodified maximum legal value System_Maximum
			
			   # if WACA then
			
			   if Overflow_System_Maximum = System_Maximum then
			      [] = RPT2:Test_Passed["Integer constrained to max", This_Test_Number, Overflow_System_Maximum]
			   else
			      [] = RPT3:Test_Failed["Integer constrained to max", This_Test_Number, Overflow_System_Maximum]
			   endif
			
			   # else
			      # ISIM does no limiting, and allows a bigger range anyway.
			      # If this bit ever got tested by WACA (and it shouldn't), this test would pass as both the
			      # operands would have been modified by WACA during code generation. This will be proved later.
			   #   if Overflow_System_Maximum = 2147483648 then
			   #      [] = RPT2:Test_Passed["Integer constrained to max", This_Test_Number, Overflow_System_Maximum]
			   #   else
			   #      [] = RPT3:Test_Failed["Integer constrained to max", This_Test_Number, Overflow_System_Maximum]
			   #   endif
			
			   #endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 3
			
			# ------------------------------------------------------------------------------------------------------------
			# Test 4 - Integer Overflow Underflow
			# ------------------------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "Integer Overflow Underflow", "Test constrained to min"]
			
			   # WACA should limit this value to the system defined min, since this value is outside of the defined integer range.
			
			   # if WACA then
			      if Underflow_System_Minimum = System_Minimum then
			         [] = RPT2:Test_Passed["Integer constrained to min", This_Test_Number, Underflow_System_Minimum]
			      else
			         [] = RPT3:Test_Failed["Integer constrained to min", This_Test_Number, Underflow_System_Minimum]
			      endif
			
			   # else
			      # ISIM does no limiting, and allows a bigger range anyway.
			   #   if Underflow_System_Minimum = -2147483649 then
			   #      [] = RPT2:Test_Passed["Integer constrained to min", This_Test_Number, Underflow_System_Minimum]
			   #   else
			   #      [] = RPT3:Test_Failed["Integer constrained to min", This_Test_Number, Underflow_System_Minimum]
			   #   endif
			
			   #endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 4
			
			# ------------------------------------------------------------------------------------------------------------
			
			Finish_Test_Number = This_Test_Number
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(5);
		function Test_Unfeasibly_Large_Object(Start_Test_Number: in integer, Finish_Test_Number: out integer) is
			@noparse
			# -----------------------------------------------------------------------------------
			# These series of test are to exmaine what happens when an object is larger than 
			# would reasonably be expected is created. Further test show what happens when 
			# said object is manipulated in various forms.
			# These tests could be spread into a variety of domains, eg. find-and-sets, 
			# function-calls and others. But since creating such a big object is a pain, all 
			# these tests shall reside here for the big object.
			# -----------------------------------------------------------------------------------
			
			# -----------------------------------------------------------------------------------
			# Test 1 - Create the unfeasibly large object and see what may be done with it.
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Start_Test_Number, "1103-0000-01-0511", "ASL Mapping", "BIG Object", "Create big object"]
			
			   Unfeasibly_Large_Object = create BIG_Object with One          = Start_Test_Number &\
			                                                    Two          = Start_Test_Number &\
			                                                    Three        = Start_Test_Number &\
			                                                    Four         = Start_Test_Number &\
			                                                    Five         = Start_Test_Number &\
			                                                    Six          = Start_Test_Number &\
			                                                    Seven        = Start_Test_Number &\
			                                                    Eight        = Start_Test_Number &\
			                                                    Nine         = Start_Test_Number &\
			                                                    Ten          = Start_Test_Number &\
			                                                    Eleven       = Start_Test_Number &\
			                                                    Twelve       = Start_Test_Number &\
			                                                    Thirteen     = Start_Test_Number &\
			                                                    Fourteen     = Start_Test_Number &\
			                                                    Fifteen      = Start_Test_Number &\
			                                                    Sixteen      = Start_Test_Number &\
			                                                    Eighteen     = Start_Test_Number &\
			                                                    Nineteen     = Start_Test_Number &\
			                                                    Twenty       = Start_Test_Number &\
			                                                    Twentyone    = Start_Test_Number &\
			                                                    Twentytwo    = Start_Test_Number &\
			                                                    Twentythree  = Start_Test_Number &\
			                                                    Twentyfour   = Start_Test_Number &\
			                                                    Twentyfive   = Start_Test_Number &\
			                                                    Twentysix    = Start_Test_Number &\
			                                                    Twentyseven  = Start_Test_Number &\
			                                                    Twentyeight  = Start_Test_Number &\
			                                                    Twentynine   = Start_Test_Number &\
			                                                    Thirty       = Start_Test_Number &\
			                                                    Thirtyone    = Start_Test_Number &\
			                                                    Thirtytwo    = Start_Test_Number &\
			                                                    Thirtythree  = Start_Test_Number &\
			                                                    Thirtyfour   = Start_Test_Number &\
			                                                    Thirtyfive   = Start_Test_Number &\
			                                                    Thirtysix    = Start_Test_Number &\
			                                                    Thirtyseven  = Start_Test_Number &\
			                                                    Thirtyeight  = Start_Test_Number &\
			                                                    Thirtynine   = Start_Test_Number &\
			                                                    Forty        = Start_Test_Number &\
			                                                    Fortyone     = Start_Test_Number &\
			                                                    Fortytwo     = Start_Test_Number &\
			                                                    Fortythree   = Start_Test_Number &\
			                                                    Fortyfour    = Start_Test_Number &\
			                                                    Fortyfive    = Start_Test_Number &\
			                                                    Fortysix     = Start_Test_Number &\
			                                                    Fortyseven   = Start_Test_Number &\
			                                                    Fortyeight   = Start_Test_Number &\
			                                                    Fortynine    = Start_Test_Number &\
			                                                    Fifty        = Start_Test_Number &\
			                                                    Fiftyone     = Start_Test_Number &\
			                                                    Fiftytwo     = Start_Test_Number &\
			                                                    Fiftythree   = Start_Test_Number &\
			                                                    Fiftyfour    = Start_Test_Number &\
			                                                    Fiftyfive    = Start_Test_Number &\
			                                                    Fiftysix     = Start_Test_Number &\
			                                                    Fiftyseven   = Start_Test_Number &\
			                                                    Fiftyeight   = Start_Test_Number &\
			                                                    Fiftynine    = Start_Test_Number &\
			                                                    Sixty        = Start_Test_Number &\
			                                                    Sixtyone     = Start_Test_Number &\
			                                                    Sixtytwo     = Start_Test_Number &\
			                                                    Sixtythree   = Start_Test_Number &\
			                                                    Sixtyfour    = Start_Test_Number &\
			                                                    Sixtyfive    = Start_Test_Number &\
			                                                    Sixtysix     = Start_Test_Number &\
			                                                    Sixtyseven   = Start_Test_Number &\
			                                                    Sixtyeight   = Start_Test_Number &\
			                                                    Sixtynine    = Start_Test_Number &\
			                                                    Seventy      = Start_Test_Number &\
			                                                    Seventyone   = Start_Test_Number &\
			                                                    Seventytwo   = Start_Test_Number &\
			                                                    Seventythree = Start_Test_Number &\
			                                                    Seventyfour  = Start_Test_Number &\
			                                                    Seventyfive  = Start_Test_Number &\
			                                                    Seventysix   = Start_Test_Number &\
			                                                    Seventyseven = Start_Test_Number &\
			                                                    Seventyeight = Start_Test_Number &\
			                                                    Seventynine  = Start_Test_Number &\
			                                                    Eighty       = Start_Test_Number &\
			                                                    Eightyone    = Start_Test_Number &\
			                                                    Eightytwo    = Start_Test_Number &\
			                                                    Eightythree  = Start_Test_Number &\
			                                                    Eightyfour   = Start_Test_Number &\
			                                                    Current_State = 'Idle_State'
			
			   if Unfeasibly_Large_Object != UNDEFINED then
			      [] = RPT2:Test_Passed["Create Big Object", Start_Test_Number, 0]
			   else
			      [] = RPT3:Test_Failed["Create Big Object", Start_Test_Number, -10]
			   endif
			
			   This_Test_Number = Start_Test_Number + 1
			
			# End Test 1
			
			# -----------------------------------------------------------------------------------
			# Test 2 - Check to see that the attributes can be read from
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine big object"]
			
			   if Unfeasibly_Large_Object != UNDEFINED then
			
			      if Unfeasibly_Large_Object.One        = Start_Test_Number &\
			         Unfeasibly_Large_Object.Fortytwo   = Start_Test_Number &\
			         Unfeasibly_Large_Object.Eightyfour = Start_Test_Number then
			
			         [] = RPT2:Test_Passed["Examine Big Object", This_Test_Number, 0]
			      else
			         [] = RPT3:Test_Failed["Examine Big Object", This_Test_Number, -20]
			      endif
			
			   else
			      [] = RPT3:Test_Failed["Examine Big Object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 2
			
			# -----------------------------------------------------------------------------------
			# Test 3 - Perform find-one on large object
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0544", "ASL Mapping", "BIG Object", "Find-one big object"]
			
			   found_one_large_object = find-one BIG_Object
			
			   if found_one_large_object != UNDEFINED then
			      [] = RPT2:Test_Passed["Find-One Big Object", This_Test_Number, 0]
			   else
			      [] = RPT3:Test_Failed["Find-One Big Object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 3
			
			# -----------------------------------------------------------------------------------
			# Test 4 - Check to see that the attributes can be read from
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-one object"]
			
			   if found_one_large_object != UNDEFINED then
			
			      if found_one_large_object.One        = Start_Test_Number &\
			         found_one_large_object.Fortytwo   = Start_Test_Number &\
			         found_one_large_object.Eightyfour = Start_Test_Number then
			
			         [] = RPT2:Test_Passed["Examine Big Object", This_Test_Number, 0]
			      else
			         [] = RPT3:Test_Failed["Examine Big Object", This_Test_Number, -20]
			      endif
			
			   else
			      [] = RPT3:Test_Failed["Examine Big Object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 4
			
			# -----------------------------------------------------------------------------------
			# Test 5 - Perform find-one <object> where <boolean condition> on large object
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0545", "ASL Mapping", "BIG Object", "Find-one where fully specifying big object"]
			
			   found_one_where_large_object = find-one BIG_Object where One          = Start_Test_Number &\
			                                                            Two          = Start_Test_Number &\
			                                                            Three        = Start_Test_Number &\
			                                                            Four         = Start_Test_Number &\
			                                                            Five         = Start_Test_Number &\
			                                                            Six          = Start_Test_Number &\
			                                                            Seven        = Start_Test_Number &\
			                                                            Eight        = Start_Test_Number &\
			                                                            Nine         = Start_Test_Number &\
			                                                            Ten          = Start_Test_Number &\
			                                                            Eleven       = Start_Test_Number &\
			                                                            Twelve       = Start_Test_Number &\
			                                                            Thirteen     = Start_Test_Number &\
			                                                            Fourteen     = Start_Test_Number &\
			                                                            Fifteen      = Start_Test_Number &\
			                                                            Sixteen      = Start_Test_Number &\
			                                                            Eighteen     = Start_Test_Number &\
			                                                            Nineteen     = Start_Test_Number &\
			                                                            Twenty       = Start_Test_Number &\
			                                                            Twentyone    = Start_Test_Number &\
			                                                            Twentytwo    = Start_Test_Number &\
			                                                            Twentythree  = Start_Test_Number &\
			                                                            Twentyfour   = Start_Test_Number &\
			                                                            Twentyfive   = Start_Test_Number &\
			                                                            Twentysix    = Start_Test_Number &\
			                                                            Twentyseven  = Start_Test_Number &\
			                                                            Twentyeight  = Start_Test_Number &\
			                                                            Twentynine   = Start_Test_Number &\
			                                                            Thirty       = Start_Test_Number &\
			                                                            Thirtyone    = Start_Test_Number &\
			                                                            Thirtytwo    = Start_Test_Number &\
			                                                            Thirtythree  = Start_Test_Number &\
			                                                            Thirtyfour   = Start_Test_Number &\
			                                                            Thirtyfive   = Start_Test_Number &\
			                                                            Thirtysix    = Start_Test_Number &\
			                                                            Thirtyseven  = Start_Test_Number &\
			                                                            Thirtyeight  = Start_Test_Number &\
			                                                            Thirtynine   = Start_Test_Number &\
			                                                            Forty        = Start_Test_Number 
			    
			                                                            #Fortyone     = Start_Test_Number &\
			                                                            #Fortytwo     = Start_Test_Number &\
			                                                            #Fortythree   = Start_Test_Number &\
			                                                            #Fortyfour    = Start_Test_Number &\
			                                                            #Fortyfive    = Start_Test_Number &\
			                                                            #Fortysix     = Start_Test_Number &\
			                                                            #Fortyseven   = Start_Test_Number &\
			                                                            #Fortyeight   = Start_Test_Number &\
			                                                            #Fortynine    = Start_Test_Number &\
			                                                            #Fifty        = Start_Test_Number &\ 
			                                                            #Fiftyone     = Start_Test_Number &\
			                                                            #Fiftytwo     = Start_Test_Number &\
			                                                            #Fiftythree   = Start_Test_Number &\
			                                                            #Fiftyfour    = Start_Test_Number &\
			                                                            #Fiftyfive    = Start_Test_Number &\
			                                                            #Fiftysix     = Start_Test_Number &\
			                                                            #Fiftyseven   = Start_Test_Number &\
			                                                            #Fiftyeight   = Start_Test_Number &\
			                                                            #Fiftynine    = Start_Test_Number &\
			                                                            #Sixty        = Start_Test_Number &\
			                                                            #Sixtyone     = Start_Test_Number &\
			                                                            #Sixtytwo     = Start_Test_Number &\
			                                                            #Sixtythree   = Start_Test_Number &\
			                                                            #Sixtyfour    = Start_Test_Number &\
			                                                            #Sixtyfive    = Start_Test_Number &\
			                                                            #Sixtysix     = Start_Test_Number &\
			                                                            #Sixtyseven   = Start_Test_Number &\
			                                                            #Sixtyeight   = Start_Test_Number &\
			                                                            #Sixtynine    = Start_Test_Number &\
			                                                            #Seventy      = Start_Test_Number &\
			                                                            #Seventyone   = Start_Test_Number &\
			                                                            #Seventytwo   = Start_Test_Number &\
			                                                            #Seventythree = Start_Test_Number &\
			                                                            #Seventyfour  = Start_Test_Number &\
			                                                            #Seventyfive  = Start_Test_Number &\ 
			                                                            #Seventysix   = Start_Test_Number &\
			                                                            #Seventyseven = Start_Test_Number &\
			                                                            #Seventyeight = Start_Test_Number &\
			                                                            #Seventynine  = Start_Test_Number &\
			                                                            #Eighty       = Start_Test_Number &\
			                                                            #Eightyone    = Start_Test_Number &\
			                                                            #Eightytwo    = Start_Test_Number &\
			                                                            #Eightythree  = Start_Test_Number &\
			                                                            #Eightyfour   = Start_Test_Number
			   
			   if found_one_where_large_object != UNDEFINED then
			      [] = RPT2:Test_Passed["Find One Where Object", This_Test_Number, 0]
			   else
			      [] = RPT3:Test_Failed["Find One Where Object", This_Test_Number, -10]
			  endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 5
			
			# -----------------------------------------------------------------------------------
			# Test 6 - Check to see that the attributes can be read from
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-one where object"]
			
			   if found_one_where_large_object != UNDEFINED then
			
			      if found_one_where_large_object.One        = Start_Test_Number &\
			         found_one_where_large_object.Fortytwo   = Start_Test_Number &\
			         found_one_where_large_object.Eightyfour = Start_Test_Number then
			
			         [] = RPT2:Test_Passed["Examine Found One Where Object", This_Test_Number, 0]
			      else
			         [] = RPT3:Test_Failed["Examine found one where object", This_Test_Number, -20]
			      endif
			 
			   else
			      [] = RPT3:Test_Failed["Examine found one where object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 6
			
			# -----------------------------------------------------------------------------------
			# Test 7 - Perform find-only on large object
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0545", "ASL Mapping", "BIG object", "Find-only big object"]
			
			   found_only_large_object = find-only BIG_Object
			
			   if found_only_large_object != UNDEFINED then
			      [] = RPT2:Test_Passed["find-only big object", This_Test_Number, 0]
			   else
			      [] = RPT3:Test_Failed["find-only big object", This_Test_Number, -1]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 7
			
			# -----------------------------------------------------------------------------------
			# Test 8 - Check to see that the attributes can be read from
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-only object"]
			
			   if found_only_large_object != UNDEFINED then
			
			      if found_only_large_object.One        = Start_Test_Number &\
			         found_only_large_object.Fortytwo   = Start_Test_Number &\
			         found_only_large_object.Eightyfour = Start_Test_Number then
			
			         [] = RPT2:Test_Passed["Examine Find-Only Object", This_Test_Number, 0]
			      else
			         [] = RPT3:Test_Failed["Examine Find-Only Object", This_Test_Number, -20]
			      endif
			
			   else
			      [] = RPT3:Test_Failed["Examine Find-Only Object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 8
			
			# -----------------------------------------------------------------------------------
			# Test 9 - Perform find-only <object> where <boolean condition> on large object
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0547", "ASL Mapping", "BIG object", "Find-only where fully specifying big object"]
			
			   #One = Start_Test_Number &\
			   #Two = Start_Test_Number &\
			   #Three = Start_Test_Number &\
			   #Four = Start_Test_Number &\
			   #Five = Start_Test_Number &\
			   #Six = Start_Test_Number &\
			   #Seven = Start_Test_Number &\
			   #Eight = Start_Test_Number &\
			   #Nine = Start_Test_Number &\
			   #Ten = Start_Test_Number &\
			   #Eleven = Start_Test_Number &\
			   #Twelve = Start_Test_Number &\
			   #Thirteen = Start_Test_Number &\
			   #Fourteen = Start_Test_Number &\
			   #Fifteen = Start_Test_Number &\
			   #Sixteen = Start_Test_Number &\
			   #Eighteen = Start_Test_Number &\
			   #Nineteen = Start_Test_Number &\
			   #Twenty = Start_Test_Number &\
			   #Twentyone = Start_Test_Number &\
			   #Twentytwo = Start_Test_Number &\
			   #Twentythree = Start_Test_Number &\
			   #Twentyfour = Start_Test_Number &\
			   #Twentyfive = Start_Test_Number &\
			   #Twentysix = Start_Test_Number &\
			   #Twentyseven = Start_Test_Number &\
			   #Twentyeight = Start_Test_Number &\
			   #Twentynine = Start_Test_Number &\
			   #Thirty = Start_Test_Number &\
			   #Thirtyone = Start_Test_Number &\
			   #Thirtytwo = Start_Test_Number &\
			   #Thirtythree = Start_Test_Number &\
			   #Thirtyfour = Start_Test_Number &\
			   #Thirtyfive = Start_Test_Number &\
			   #Thirtysix = Start_Test_Number &\
			   #Thirtyseven = Start_Test_Number &\
			   #Thirtyeight = Start_Test_Number &\
			   #Thirtynine = Start_Test_Number &\
			
			   found_only_where_large_object = find-only BIG_Object where Forty        = Start_Test_Number &\
			                                                              Fortyone     = Start_Test_Number &\
			                                                              Fortytwo     = Start_Test_Number &\
			                                                              Fortythree   = Start_Test_Number &\
			                                                              Fortyfour    = Start_Test_Number &\
			                                                              Fortyfive    = Start_Test_Number &\
			                                                              Fortysix     = Start_Test_Number &\
			                                                              Fortyseven   = Start_Test_Number &\ 
			                                                              Fortyeight   = Start_Test_Number &\
			                                                              Fortynine    = Start_Test_Number &\
			                                                              Fifty        = Start_Test_Number &\
			                                                              Fiftyone     = Start_Test_Number &\
			                                                              Fiftytwo     = Start_Test_Number &\
			                                                              Fiftythree   = Start_Test_Number &\
			                                                              Fiftyfour    = Start_Test_Number &\
			                                                              Fiftyfive    = Start_Test_Number &\
			                                                              Fiftysix     = Start_Test_Number &\
			                                                              Fiftyseven   = Start_Test_Number &\
			                                                              Fiftyeight   = Start_Test_Number &\
			                                                              Fiftynine    = Start_Test_Number &\ 
			                                                              Sixty        = Start_Test_Number &\ 
			                                                              Sixtyone     = Start_Test_Number &\
			                                                              Sixtytwo     = Start_Test_Number &\ 
			                                                              Sixtythree   = Start_Test_Number &\
			                                                              Sixtyfour    = Start_Test_Number &\
			                                                              Sixtyfive    = Start_Test_Number &\
			                                                              Sixtysix     = Start_Test_Number &\
			                                                              Sixtyseven   = Start_Test_Number &\
			                                                              Sixtyeight   = Start_Test_Number &\
			                                                              Sixtynine    = Start_Test_Number &\
			                                                              Seventy      = Start_Test_Number &\
			                                                              Seventyone   = Start_Test_Number &\
			                                                              Seventytwo   = Start_Test_Number &\
			                                                              Seventythree = Start_Test_Number &\
			                                                              Seventyfour  = Start_Test_Number &\
			                                                              Seventyfive  = Start_Test_Number &\
			                                                              Seventysix   = Start_Test_Number &\
			                                                              Seventyseven = Start_Test_Number &\
			                                                              Seventyeight = Start_Test_Number &\
			                                                              Seventynine  = Start_Test_Number &\
			                                                              Eighty       = Start_Test_Number &\  
			                                                              Eightyone    = Start_Test_Number &\
			                                                              Eightytwo    = Start_Test_Number &\
			                                                              Eightythree  = Start_Test_Number &\
			                                                              Eightyfour   = Start_Test_Number
			  
			   if found_only_where_large_object != UNDEFINED then
			      [] = RPT2:Test_Passed["Find Only Where Object", This_Test_Number, 0]
			   else
			      [] = RPT3:Test_Failed["Find Only Where Object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			#  End Test 9
			
			# -----------------------------------------------------------------------------------
			# Test 10 - Check to see that the attributes can be read from
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-only where object"]
			
			   if found_only_where_large_object != UNDEFINED then
			
			      if found_only_where_large_object.One        = Start_Test_Number &\
			         found_only_where_large_object.Fortytwo   = Start_Test_Number &\
			         found_only_where_large_object.Eightyfour = Start_Test_Number then
			
			         [] = RPT2:Test_Passed["Examine Found Only Where Object", This_Test_Number, 0]
			      else
			         [] = RPT3:Test_Failed["Examine found only where object", This_Test_Number, -20]
			      endif
			
			   else
			      [] = RPT3:Test_Failed["Examine found only where object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 10
			
			# -----------------------------------------------------------------------------------
			# Test 11 - {set} = find <object> where <boolean condition>
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0541", "ASL Mapping", "BIG Object", "Find set where object"]
			
			   {big_set} = find BIG_Object where One          = Start_Test_Number &\
			                                     Two          = Start_Test_Number &\
			                                     Three        = Start_Test_Number &\
			                                     Four         = Start_Test_Number &\
			                                     Five         = Start_Test_Number &\
			                                     Six          = Start_Test_Number &\
			                                     Seven        = Start_Test_Number &\
			                                     Eight        = Start_Test_Number &\
			                                     Nine         = Start_Test_Number &\
			                                     Ten          = Start_Test_Number &\
			                                     Eleven       = Start_Test_Number &\
			                                     Twelve       = Start_Test_Number &\
			                                     Thirteen     = Start_Test_Number &\
			                                     Fourteen     = Start_Test_Number &\ 
			                                     Fifteen      = Start_Test_Number &\
			                                     Sixteen      = Start_Test_Number &\
			                                     Eighteen     = Start_Test_Number &\
			                                     Nineteen     = Start_Test_Number &\
			                                     Twenty       = Start_Test_Number &\
			                                     Forty        = Start_Test_Number &\
			                                     Fortyone     = Start_Test_Number &\
			                                     Fortytwo     = Start_Test_Number &\
			                                     Fortythree   = Start_Test_Number &\
			                                     Fortyfour    = Start_Test_Number &\
			                                     Fortyfive    = Start_Test_Number &\
			                                     Fortysix     = Start_Test_Number &\
			                                     Fortyseven   = Start_Test_Number &\
			                                     Fortyeight   = Start_Test_Number &\
			                                     Fortynine    = Start_Test_Number &\
			                                     Fifty        = Start_Test_Number &\
			                                     Fiftyone     = Start_Test_Number &\
			                                     Fiftytwo     = Start_Test_Number &\
			                                     Fiftythree   = Start_Test_Number &\
			                                     Fiftyfour    = Start_Test_Number &\
			                                     Fiftyfive    = Start_Test_Number &\
			                                     Fiftysix     = Start_Test_Number &\
			                                     Fiftyseven   = Start_Test_Number &\
			                                     Fiftyeight   = Start_Test_Number &\
			                                     Fiftynine    = Start_Test_Number &\ 
			                                     Eighty       = Start_Test_Number &\
			                                     Eightyone    = Start_Test_Number &\
			                                     Eightytwo    = Start_Test_Number &\
			                                     Eightythree  = Start_Test_Number &\
			                                     Eightyfour   = Start_Test_Number
			  
			                                     #Twentyone    = Start_Test_Number &\
			                                     #Twentytwo    = Start_Test_Number &\
			                                     #Twentythree  = Start_Test_Number &\
			                                     #Twentyfour   = Start_Test_Number &\
			                                     #Twentyfive   = Start_Test_Number &\
			                                     #Twentysix    = Start_Test_Number &\
			                                     #Twentyseven  = Start_Test_Number &\
			                                     #Twentyeight  = Start_Test_Number &\
			                                     #Twentynine   = Start_Test_Number &\
			                                     #Thirty       = Start_Test_Number &\
			                                     #Thirtyone    = Start_Test_Number &\
			                                     #Thirtytwo    = Start_Test_Number &\
			                                     #Thirtythree  = Start_Test_Number &\
			                                     #Thirtyfour   = Start_Test_Number &\
			                                     #Thirtyfive   = Start_Test_Number &\
			                                     #Thirtysix    = Start_Test_Number &\
			                                     #Thirtyseven  = Start_Test_Number &\
			                                     #Thirtyeight  = Start_Test_Number &\
			                                     #Thirtynine   = Start_Test_Number &\
			
			                                     #Sixty        = Start_Test_Number &\
			                                     #Sixtyone     = Start_Test_Number &\
			                                     #Sixtytwo     = Start_Test_Number &\
			                                     #Sixtythree   = Start_Test_Number &\
			                                     #Sixtyfour    = Start_Test_Number &\
			                                     #Sixtyfive    = Start_Test_Number &\
			                                     #Sixtysix     = Start_Test_Number &\
			                                     #Sixtyseven   = Start_Test_Number &\
			                                     #Sixtyeight   = Start_Test_Number &\
			                                     #Sixtynine    = Start_Test_Number &\
			                                     #Seventy      = Start_Test_Number &\
			                                     #Seventyone   = Start_Test_Number &\
			                                     #Seventytwo   = Start_Test_Number &\
			                                     #Seventythree = Start_Test_Number &\
			                                     #Seventyfour  = Start_Test_Number &\
			                                     #Seventyfive  = Start_Test_Number &\
			                                     #Seventysix   = Start_Test_Number &\
			                                     #Seventyseven = Start_Test_Number &\
			                                     #Seventyeight = Start_Test_Number &\
			                                     #Seventynine  = Start_Test_Number &\
			 
			   if countof {big_set} = 1 then
			      [] = RPT2:Test_Passed["Find Set Of Big Object", This_Test_Number, 0]
			   else
			      [] = RPT3:Test_Failed["Find Set Of Big Object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 11
			
			# -----------------------------------------------------------------------------------
			# Test 12 - Check to see that the attributes can be read from each in the set
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-only where object"]
			
			   for found_only_where_set_large_object in {big_set} do
			
			      if found_only_where_set_large_object != UNDEFINED then
			
			         if found_only_where_set_large_object.One        = Start_Test_Number &\
			            found_only_where_set_large_object.Fortytwo   = Start_Test_Number &\
			            found_only_where_set_large_object.Eightyfour = Start_Test_Number then
			
			            [] = RPT2:Test_Passed["Examine Found Only Where Object", This_Test_Number, 0]
			         else
			            [] = RPT3:Test_Failed["Examine Found Only Where Object", This_Test_Number, -20]
			         endif
			
			      else
			         [] = RPT3:Test_Failed["Examine Found Only Where Object", This_Test_Number, -10]
			      endif
			 
			   endfor
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 12
			
			# -----------------------------------------------------------------------------------
			# Test 13 - find-all <object>
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0543", "ASL Mapping", "BIG Object", "Find-all set where object"]
			
			   {all_big_set} = find-all BIG_Object 
			
			   if countof {all_big_set} = 1 then
			      [] = RPT2:Test_Passed["Find-All Set Of Big Object", This_Test_Number, 0]
			   else
			      [] = RPT3:Test_Failed["Find-All Set Of Big Object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 13
			
			# -----------------------------------------------------------------------------------
			# Test 14 - Check to see that the attributes can be read from each in the set
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-all object"]
			
			   for found_all_set_large_object in {all_big_set} do
			
			      if found_all_set_large_object != UNDEFINED then
			
			         if found_all_set_large_object.One        = Start_Test_Number &\
			            found_all_set_large_object.Fortytwo   = Start_Test_Number &\
			            found_all_set_large_object.Eightyfour = Start_Test_Number then
			
			            [] = RPT2:Test_Passed["Examine Found All Object", This_Test_Number, 0]
			         else
			            [] = RPT3:Test_Failed["Examine Found All Object", This_Test_Number, -20]
			         endif
			
			      else
			         [] = RPT3:Test_Failed["Examine Found All Object", This_Test_Number, -10]
			      endif
			 
			    endfor
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 14
			
			# -----------------------------------------------------------------------------------
			# Test 15 - Check to see that the large object may be passed as a parameter into a 
			#           domain based synch service
			# -----------------------------------------------------------------------------------
			
			   [] = objBIG1:Receive_Unfeasonableness[Unfeasibly_Large_Object, This_Test_Number, Start_Test_Number]
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 15
			
			# -----------------------------------------------------------------------------------
			# Test 16 - Create the unfeasibly large object and see what may be done with it
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0511", "ASL Mapping", "BIG Object", "Create big active object"]
			
			   # Stash this number for later use when this object is decoded.
			   Expected_Number = This_Test_Number
			
			   Active_Unfeasibly_Large_Object = create BIG_Object with One          = This_Test_Number &\
			                                                           Two          = This_Test_Number &\
			                                                           Three        = This_Test_Number &\
			                                                           Four         = This_Test_Number &\
			                                                           Five         = This_Test_Number &\
			                                                           Six          = This_Test_Number &\
			                                                           Seven        = This_Test_Number &\ 
			                                                           Eight        = This_Test_Number &\
			                                                           Nine         = This_Test_Number &\
			                                                           Ten          = This_Test_Number &\ 
			                                                           Eleven       = This_Test_Number &\
			                                                           Twelve       = This_Test_Number &\
			                                                           Thirteen     = This_Test_Number &\
			                                                           Fourteen     = This_Test_Number &\
			                                                           Fifteen      = This_Test_Number &\
			                                                           Sixteen      = This_Test_Number &\
			                                                           Eighteen     = This_Test_Number &\
			                                                           Nineteen     = This_Test_Number &\
			                                                           Twenty       = This_Test_Number &\
			                                                           Twentyone    = This_Test_Number &\
			                                                           Twentytwo    = This_Test_Number &\
			                                                           Twentythree  = This_Test_Number &\
			                                                           Twentyfour   = This_Test_Number &\
			                                                           Twentyfive   = This_Test_Number &\
			                                                           Twentysix    = This_Test_Number &\ 
			                                                           Twentyseven  = This_Test_Number &\
			                                                           Twentyeight  = This_Test_Number &\
			                                                           Twentynine   = This_Test_Number &\
			                                                           Thirty       = This_Test_Number &\
			                                                           Thirtyone    = This_Test_Number &\
			                                                           Thirtytwo    = This_Test_Number &\
			                                                           Thirtythree  = This_Test_Number &\
			                                                           Thirtyfour   = This_Test_Number &\
			                                                           Thirtyfive   = This_Test_Number &\
			                                                           Thirtysix    = This_Test_Number &\
			                                                           Thirtyseven  = This_Test_Number &\
			                                                           Thirtyeight  = This_Test_Number &\
			                                                           Thirtynine   = This_Test_Number &\
			                                                           Forty        = This_Test_Number &\
			                                                           Fortyone     = This_Test_Number &\
			                                                           Fortytwo     = This_Test_Number &\
			                                                           Fortythree   = This_Test_Number &\
			                                                           Fortyfour    = This_Test_Number &\
			                                                           Fortyfive    = This_Test_Number &\
			                                                           Fortysix     = This_Test_Number &\
			                                                           Fortyseven   = This_Test_Number &\
			                                                           Fortyeight   = This_Test_Number &\
			                                                           Fortynine    = This_Test_Number &\
			                                                           Fifty        = This_Test_Number &\
			                                                           Fiftyone     = This_Test_Number &\
			                                                           Fiftytwo     = This_Test_Number &\
			                                                           Fiftythree   = This_Test_Number &\
			                                                           Fiftyfour    = This_Test_Number &\
			                                                           Fiftyfive    = This_Test_Number &\
			                                                           Fiftysix     = This_Test_Number &\
			                                                           Fiftyseven   = This_Test_Number &\
			                                                           Fiftyeight   = This_Test_Number &\
			                                                           Fiftynine    = This_Test_Number &\
			                                                           Sixty        = This_Test_Number &\
			                                                           Sixtyone     = This_Test_Number &\
			                                                           Sixtytwo     = This_Test_Number &\
			                                                           Sixtythree   = This_Test_Number &\
			                                                           Sixtyfour    = This_Test_Number &\
			                                                           Sixtyfive    = This_Test_Number &\
			                                                           Sixtysix     = This_Test_Number &\
			                                                           Sixtyseven   = This_Test_Number &\
			                                                           Sixtyeight   = This_Test_Number &\
			                                                           Sixtynine    = This_Test_Number &\
			                                                           Seventy      = This_Test_Number &\
			                                                           Seventyone   = This_Test_Number &\
			                                                           Seventytwo   = This_Test_Number &\
			                                                           Seventythree = This_Test_Number &\
			                                                           Seventyfour  = This_Test_Number &\
			                                                           Seventyfive  = This_Test_Number &\
			                                                           Seventysix   = This_Test_Number &\
			                                                           Seventyseven = This_Test_Number &\
			                                                           Seventyeight = This_Test_Number &\
			                                                           Seventynine  = This_Test_Number &\
			                                                           Eighty       = This_Test_Number &\
			                                                           Eightyone    = This_Test_Number &\
			                                                           Eightytwo    = This_Test_Number &\
			                                                           Eightythree  = This_Test_Number &\
			                                                           Eightyfour   = This_Test_Number &\
			                                                           Current_State = 'Idle_State'
			
			   if Active_Unfeasibly_Large_Object != UNDEFINED then
			      [] = RPT2:Test_Passed["create Big Active Object", This_Test_Number, 0]
			   else
			      [] = RPT3:Test_Failed["create Big Active Object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 16
			
			# -----------------------------------------------------------------------------------
			# Test 17 - There are two separate tests performed by that last generate statement, 
			#           so increment the counter accordingly
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0511", "ASL Mapping", "BIG object", "Delete big active object"]
			   [] = RPT8:Specify_Requid[This_Test_Number, "1103-0000-01-0531"]
			
			   Doomed_Unfeasibly_Large_Object = create BIG_Object with One          = This_Test_Number &\
			                                                           Two          = This_Test_Number &\
			                                                           Three        = This_Test_Number &\
			                                                           Four         = This_Test_Number &\
			                                                           Five         = This_Test_Number &\
			                                                           Six          = This_Test_Number &\
			                                                           Seven        = This_Test_Number &\
			                                                           Eight        = This_Test_Number &\
			                                                           Nine         = This_Test_Number &\
			                                                           Ten          = This_Test_Number &\
			                                                           Eleven       = This_Test_Number &\
			                                                           Twelve       = This_Test_Number &\
			                                                           Thirteen     = This_Test_Number &\
			                                                           Fourteen     = This_Test_Number &\
			                                                           Fifteen      = This_Test_Number &\
			                                                           Sixteen      = This_Test_Number &\
			                                                           Eighteen     = This_Test_Number &\
			                                                           Nineteen     = This_Test_Number &\
			                                                           Twenty       = This_Test_Number &\
			                                                           Twentyone    = This_Test_Number &\
			                                                           Twentytwo    = This_Test_Number &\
			                                                           Twentythree  = This_Test_Number &\
			                                                           Twentyfour   = This_Test_Number &\
			                                                           Twentyfive   = This_Test_Number &\
			                                                           Twentysix    = This_Test_Number &\
			                                                           Twentyseven  = This_Test_Number &\
			                                                           Twentyeight  = This_Test_Number &\
			                                                           Twentynine   = This_Test_Number &\
			                                                           Thirty       = This_Test_Number &\
			                                                           Thirtyone    = This_Test_Number &\
			                                                           Thirtytwo    = This_Test_Number &\
			                                                           Thirtythree  = This_Test_Number &\
			                                                           Thirtyfour   = This_Test_Number &\
			                                                           Thirtyfive   = This_Test_Number &\
			                                                           Thirtysix    = This_Test_Number &\
			                                                           Thirtyseven  = This_Test_Number &\
			                                                           Thirtyeight  = This_Test_Number &\
			                                                           Thirtynine   = This_Test_Number &\
			                                                           Forty        = This_Test_Number &\
			                                                           Fortyone     = This_Test_Number &\
			                                                           Fortytwo     = This_Test_Number &\
			                                                           Fortythree   = This_Test_Number &\
			                                                           Fortyfour    = This_Test_Number &\
			                                                           Fortyfive    = This_Test_Number &\
			                                                           Fortysix     = This_Test_Number &\
			                                                           Fortyseven   = This_Test_Number &\
			                                                           Fortyeight   = This_Test_Number &\
			                                                           Fortynine    = This_Test_Number &\
			                                                           Fifty        = This_Test_Number &\
			                                                           Fiftyone     = This_Test_Number &\
			                                                           Fiftytwo     = This_Test_Number &\
			                                                           Fiftythree   = This_Test_Number &\
			                                                           Fiftyfour    = This_Test_Number &\
			                                                           Fiftyfive    = This_Test_Number &\
			                                                           Fiftysix     = This_Test_Number &\
			                                                           Fiftyseven   = This_Test_Number &\
			                                                           Fiftyeight   = This_Test_Number &\
			                                                           Fiftynine    = This_Test_Number &\
			                                                           Sixty        = This_Test_Number &\
			                                                           Sixtyone     = This_Test_Number &\
			                                                           Sixtytwo     = This_Test_Number &\
			                                                           Sixtythree   = This_Test_Number &\
			                                                           Sixtyfour    = This_Test_Number &\
			                                                           Sixtyfive    = This_Test_Number &\
			                                                           Sixtysix     = This_Test_Number &\
			                                                           Sixtyseven   = This_Test_Number &\
			                                                           Sixtyeight   = This_Test_Number &\
			                                                           Sixtynine    = This_Test_Number &\
			                                                           Seventy      = This_Test_Number &\
			                                                           Seventyone   = This_Test_Number &\
			                                                           Seventytwo   = This_Test_Number &\
			                                                           Seventythree = This_Test_Number &\
			                                                           Seventyfour  = This_Test_Number &\
			                                                           Seventyfive  = This_Test_Number &\
			                                                           Seventysix   = This_Test_Number &\
			                                                           Seventyseven = This_Test_Number &\
			                                                           Seventyeight = This_Test_Number &\
			                                                           Seventynine  = This_Test_Number &\
			                                                           Eighty       = This_Test_Number &\
			                                                           Eightyone    = This_Test_Number &\
			                                                           Eightytwo    = This_Test_Number &\
			                                                           Eightythree  = This_Test_Number &\
			                                                           Eightyfour   = This_Test_Number &\
			                                                           Current_State = 'Idle_State'
			  
			   delete Doomed_Unfeasibly_Large_Object
			
			   if Doomed_Unfeasibly_Large_Object = UNDEFINED then
			      [] = RPT2:Test_Passed["Delete Big Active Object", This_Test_Number, 0]
			   else
			      [] = RPT3:Test_Failed["Delete Big Active Object", This_Test_Number, -10]
			   endif
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 17
			
			# -----------------------------------------------------------------------------------
			# Test 18 - 
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "BIG object", "NULL"]
			   [] = RPT2:Test_Passed["NULL", This_Test_Number, 0]
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 18
			
			# -----------------------------------------------------------------------------------
			# Test 19 - 
			# -----------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "BIG object", "NULL2"]
			   [] = RPT2:Test_Passed["NULL2", This_Test_Number  , 0]
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 19
			
			# -----------------------------------------------------------------------------------
			# Test 20 -
			# -----------------------------------------------------------------------------------
			
			   generate objBIG1:Have_A_Biggie (Unfeasibly_Large_Object, This_Test_Number, Expected_Number) to Active_Unfeasibly_Large_Object
			
			   This_Test_Number = This_Test_Number + 1
			
			# End Test 20
			
			# -----------------------------------------------------------------------------------
			# Test 21 -
			# -----------------------------------------------------------------------------------
			
			   # generate to send the object into termination state.
			   # This will only work if the events generated following the transition out of 'IDLE_STATE' have been processed first.
			
			   # generate objBIG2:To_Complete() to Active_Unfeasibly_Large_Object
			
			# -----------------------------------------------------------------------------------
			
			Finish_Test_Number = This_Test_Number
			@endnoparse
		end function;

		@dialect("asl");
		@function_num(2);
		function basic_asl_divide_by_zero(Test_Start: in integer, Final_Test: out integer) is
			@noparse
			# -------------------------------------------------------------------------------------------
			#
			# The following operators shall be supported: +, -, /, *, ^, unary - 
			# 1103-0000-01-0814
			#
			# -------------------------------------------------------------------------------------------
			
			   Test = Test_Start
			
			   [Host] = WAW1:What_Env[]
			
			# -------------------------------------------------------------------------------------------
			# TEST 1 - Integer divide by zero tests
			# -------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Divide by integer zero"]
			
			   int_zero      = 0
			   an_int_value  = 10
			   an_int_result = 0
			
			   if Host = "WACA" then
			      Supported = TRUE
			      an_int_result = (an_int_value / int_zero)
			   else
			      Supported = FALSE
			   endif
			
			   # The result of a divide by zero is the result is set to 'last.
			   # Since this is target dependant, a check for non-zero is the easiest option.
			
			   if Supported = TRUE then
			
			      if an_int_result != int_zero then 
			         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			      else
			         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			      endif
			
			   else
			      [] = RPT4:Test_Unsupported[Test]
			   endif
			
			   Test = Test + 1
			
			# End Test 1
			
			# -------------------------------------------------------------------------------------------
			# TEST 2 - Integer divide by zero tests
			# -------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Negative divide by integer zero"]
			
			   int_zero      = 0
			   an_int_value  = -10
			   an_int_result = 0
			
			   if Host = "WACA" then
			      Supported = TRUE
			      an_int_result = (an_int_value / int_zero)
			   else
			      Supported = FALSE
			   endif
			
			   # The result of a divide by zero is the result is set to 'last.
			   # Since this is target dependant, a check for non-zero is the easiest option.
			
			   if Supported = TRUE then
			
			      if an_int_result != int_zero then 
			         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			      else
			         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			      endif
			
			   else
			      [] = RPT4:Test_Unsupported[Test]
			   endif
			
			   Test = Test + 1
			
			# End Test 2
			
			# -------------------------------------------------------------------------------------------
			# TEST 3 - Integer divide by zero tests
			# -------------------------------------------------------------------------------------------      
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Zero divided by integer zero"]
			
			   int_zero      = 0
			   an_int_value  = 0
			   an_int_result = 0
			
			   if Host = "WACA" then
			      Supported = TRUE
			      an_int_result = (an_int_value / int_zero)
			   else
			      Supported = FALSE
			   endif
			
			   if Supported = TRUE then
			
			      if an_int_result = int_zero then 
			         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			      else
			         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			      endif
			
			   else
			      [] = RPT4:Test_Unsupported [Test]
			   endif  
			
			   Test = Test + 1
			
			# End Test 3
			
			# -------------------------------------------------------------------------------------------
			# TEST 4 - Real divide by zero tests
			# -------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Divide by real zero"]
			   
			   real_zero        = 0.0
			   a_real_value     = 10.0
			   a_real_result    = 0.0
			
			   if Host = "WACA" then
			      Supported = TRUE
			      a_real_result = (a_real_value / real_zero)
			   else
			      Supported = FALSE
			   endif
			
			   if Supported = TRUE then
			
			      if a_real_result != real_zero then 
			         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			      else
			         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			      endif
			
			   else
			      [] = RPT4:Test_Unsupported[Test]
			   endif
			
			   Test = Test + 1
			
			# End Test 4
			
			# -------------------------------------------------------------------------------------------
			# TEST 5 - Real divide by zero tests
			# -------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "basic asl DBSS", "Negative divide by real zero"]
			
			   real_zero        = 0.0
			   a_real_value     = -10.0
			   a_real_result    = 0.0
			
			   if Host = "WACA" then
			      Supported = TRUE
			      a_real_result = (a_real_value / real_zero)
			   else
			      Supported = FALSE
			   endif
			
			   if Supported = TRUE then
			
			      if a_real_result != real_zero then 
			         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			      else
			         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			      endif
			
			   else
			      [] = RPT4:Test_Unsupported[Test]
			   endif
			
			   Test = Test + 1
			
			# End Test 5
			
			# -------------------------------------------------------------------------------------------
			# TEST 6 - Real divide by zero tests
			# -------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Zero divided by real zero"]
			
			   real_zero        = 0.0
			   a_real_value     = 0.0
			   a_real_result    = 0.0
			
			   if Host = "WACA" then
			      Supported = TRUE
			      a_real_result = (a_real_value / real_zero)
			   else
			      Supported = FALSE
			   endif
			
			   if Supported = TRUE then
			
			      if a_real_result = real_zero then 
			         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			      else
			         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
			      endif
			
			   else
			      [] = RPT4:Test_Unsupported[Test]
			   endif
			
			   Test = Test + 1
			
			# End Test 6
			
			# ------------------------------------------------------------------------------
			
			Final_Test = Test
			@endnoparse
		end function;

		//!  This function test basic ASL operations on base types and enumerated types.
		@dialect("asl");
		@function_num(1);
		function basic_asl_enumeration(Test_Start: in integer, Final_Test: out integer) is
			@noparse
			# -------------------------------------------------------------------------------------------
			#
			# The ASL <switch> statement shall be supported
			# 1103-0000-01-0411
			#
			# The ASL shall support user defined types
			# 1103-0000-01-0312
			#
			# -------------------------------------------------------------------------------------------
			
			# -------------------------------------------------------------------------------------------
			# TEST 1 - Check to ensure that local variables are correctly assigned
			# -------------------------------------------------------------------------------------------
			
			   Test = Test_Start
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0311", "ASL Mapping", "Basic ASL DBSS",  "Local variable assignment"]
			
			   Has_Failed = FALSE
			
			   an_int = 1
			   a_real = 2.3
			
			   # Check that 32 characters can handled
			   some_alpha_text   = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF"
			   lower_case_text   = "abcdefghijklmnopqrstuvwxyzabcdef"
			   some_numeric_text = "12345678901234567890123456789012"
			
			   # Check that all characters are permitted.
			   an_asterisk    = "*"
			   an_at          = "@"
			   a_minus        = "-"
			   an_equals      = "="
			   a_plus         = "+"
			   an_underscore  = "_"
			   a_slash        = "/"
			   a_question     = "?"
			   a_fullstop     = "."
			   a_comma        = ","
			   an_ampersand   = "&"
			   left_bracket   = "("
			   right_bracket  = ")"
			
			   a_colon        = ":"
			   a_tilda        = "~"
			   a_pipe         = "|"
			   an_exclamation = "!"
			   a_single_quote = "'"
			   a_left_tick    = "`"
			   a_power_operator       = "^"
			   a_left_square_bracket  = "["
			   a_rigt_square_bracket  = "]"
			   a_left_curly_bracket   = "{"
			   a_right_curley_bracket = "}"
			   a_hash = "#"
			
			   #{
			     The following are not permitted : 
			
			     a_backslash    = "\"
			     a_percent      = "%"
			     a_semi_colon   = ";"
			
			   }#
			
			   a_bool     = FALSE
			   other_int  = an_int
			   other_real = a_real
			   other_text = some_alpha_text
			   other_bool = a_bool
			
			   if an_int = other_int then
			 
			      if a_real = other_real then
			
			         if a_bool = other_bool then
			
			            if some_alpha_text != other_text then
			               Has_Failed   = TRUE
			               Failure_Code = -10
			            endif
			
			         else
			            Has_Failed   = TRUE
			            Failure_Code = -20
			         endif
			
			      else
			         Has_Failed   = TRUE
			         Failure_Code = -30
			      endif
			
			   else
			      Has_Failed   = TRUE
			      Failure_Code = -40
			   endif
			
			   if Has_Failed then
			      [] = RPT3:Test_Failed["Basic ASL", Test, Failure_Code]
			   else
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   endif
			
			   Test = Test + 1
			
			# End Test 1
			
			# -------------------------------------------------------------------------------------------
			# TEST 2 - Check that enumerated types are being used correctly
			# -------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0312", "ASL Mapping", "Basic ASL DBSS", "Enumerated Types"]
			
			   Has_Failed = FALSE
			
			   an_enum of Enum = 'John'
			
			   switch an_enum
			
			      case 'John'
			         Has_Failed = FALSE
			
			      case 'Richard'
			         Has_Failed   = TRUE
			         Failure_Code = -10
			
			      default
			         Has_Failed   = TRUE
			         Failure_Code = -20
			
			   endswitch
			
			   if Has_Failed then
			      [] = RPT3:Test_Failed["Basic ASL", Test, Failure_Code]
			   else
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   endif
			
			   Test = Test + 1
			
			# End Test 2
			
			# -------------------------------------------------------------------------------------------
			# TEST 3 - Check that enumerated types are being used correctly
			# -------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0312", "ASL Mapping", "Basic ASL DBSS", "Enumerated Types"]
			
			   Has_Failed = FALSE
			
			   an_enum of Enum = 'Richard'
			
			   switch an_enum
			
			      case 'John'
			         Has_Failed   = TRUE
			         Failure_Code = -10
			
			      case 'Richard'
			         Has_Failed = FALSE
			   
			      default
			         Has_Failed   = TRUE
			         Failure_Code = -20
			
			   endswitch
			
			   if Has_Failed then
			      [] = RPT3:Test_Failed["Basic ASL", Test, Failure_Code]
			   else
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   endif
			
			   Test = Test + 1
			   
			# End Test 3
			
			# -------------------------------------------------------------------------------------------
			# TEST 4 enumerated types
			# -------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "1103-0000-01-0312", "ASL Mapping", "Basic ASL DBSS", "Enumerated Types"]
			
			   Has_Failed = FALSE
			
			   an_enum of Enum = 'Goran'
			
			   switch an_enum
			
			      case 'John'
			         Has_Failed   = TRUE
			         Failure_Code = -10
			
			      case 'Richard'
			         Has_Failed   = TRUE
			         Failure_Code = -20
			
			      default
			         Has_Failed = FALSE
			
			   endswitch
			
			   if Has_Failed then
			      [] = RPT3:Test_Failed["Basic ASL", Test, Failure_Code]
			   else
			      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
			   endif
			
			   Test = Test + 1
			
			# End Test 4
			
			# -------------------------------------------------------------------------------------------
			# Test 5 - Simple structure assignment
			# -------------------------------------------------------------------------------------------
			
			   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "Basic ASL DBSS","Simple structure"]
			
			   Has_Failed   = FALSE
			   Failure_Code = -10
			
			   {Simple_Structure} is Simple_Structure_Type
			
			   Control_Integer      = 10
			   Control_Real         = 10.0
			   Control_String       = "Ten"
			   Control_Boolean      = TRUE
			   Control_Enum of Enum = 'Richard'
			
			   Control_Instance_Handle = find-one Object_IF
			
			   append [Control_Integer, Control_Real, Control_String, \ 
			           Control_Boolean, Control_Enum] to \
			           {Simple_Structure}
			
			   # Perform a test when unpacking the structure.
			   # Note that instance handles may not be compared.
			
			   for [Local_Integer, Local_Real, Local_String, Local_Boolean, Local_Enum] in {Simple_Structure} do
			
			      if Local_Integer = Control_Integer then 
			
			         if Local_Real = Control_Real    then
			
			            if Local_String = Control_String  then
			
			               if Local_Boolean = Control_Boolean then
			
			                  if Local_Enum != Control_Enum    then
			                     Has_Failed   = TRUE
			                     Failure_Code = -10
			                  endif
			
			               else
			                  Has_Failed   = TRUE
			                  Failure_Code = -20
			               endif
			
			            else
			               Has_Failed   = TRUE
			               Failure_Code = -30
			            endif
			
			         else
			            Has_Failed   = TRUE
			            Failure_Code = -40
			         endif
			
			      else
			         Has_Failed   = TRUE
			         Failure_Code = -50
			      endif
			
			   endfor
			   
			   if not Has_Failed then
			      [] = RPT2:Test_Passed["Simple structure", Test,  0]
			   else
			      [] = RPT3:Test_Failed["Simple_Structure", Test, Failure_Code]
			   endif
			
			   Test = Test + 1
			
			# End Test 5
			
			#-------------------------------------------------------------------------------
			
			Final_Test = Test
			@endnoparse
		end function;

	end package;

end;

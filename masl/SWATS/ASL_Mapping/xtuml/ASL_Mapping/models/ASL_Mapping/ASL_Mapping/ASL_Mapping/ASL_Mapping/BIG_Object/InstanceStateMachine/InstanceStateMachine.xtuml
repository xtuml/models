// BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

within ASL_Mapping::ASL_Mapping::ASL_Mapping::ASL_Mapping::BIG_Object is

	@state_num(1);
	@dialect("asl");
	state Idle_State;

	@state_num(2);
	@dialect("asl");
	state How_Big;

	@state_num(3);
	@dialect("asl");
	state Complete;

	@state_num(4);
	@dialect("asl");
	state Next_Stage;

	@event_num(1);
	event Have_A_Biggie(Big_IH: in instance of BIG_Object, Current_Test_Number: in integer, Expected_Result_Number: in integer);

	@event_num(2);
	event To_Complete;

	@event_num(3);
	event This_Wont_Happen;

	@event_num(4);
	event To_Next_Stage(Big_IH: in instance of BIG_Object, Next_Test_Number: in integer);

	state model is

		|                  | Have_A_Biggie    | To_Complete      | This_Wont_Happen | To_Next_Stage    |
		| ---------------- | ---------------- | ---------------- | ---------------- | ---------------- |
		| Idle_State       | How_Big          | ignore           | cannot_happen    | ignore           |
		| How_Big          | ignore           | cannot_happen    | Idle_State       | Next_Stage       |
		| Complete         | cannot_happen    | cannot_happen    | cannot_happen    | cannot_happen    |
		| Next_Stage       | ignore           | Complete         | cannot_happen    | ignore           |

	end state model;

	state Idle_State is
		@noparse
		# If we gete here, there is serious grief.
		
		[] = RPT5:Test_Text[0,"Major Error"]
		
		#$ADA_INLINE
		
		#   with Application_Types;
		
		#   raise Application_Types.Stop_Application;
		
		#$END_ADAINLINE
		@endnoparse
	end state;

	state How_Big(Big_IH: in instance of BIG_Object, Current_Test_Number: in integer, Expected_Result_Number: in integer) is
		@noparse
		[] = RPT1:Start_Test[Current_Test_Number, "Null Requid", "ASL Mapping", "Big Object", "generate to big object"]
		
		Local_Test_Number = Current_Test_Number
		
		# Compare the attributes of this to the control data
		
		if this.One = Expected_Result_Number and \
		   this.Forty = Expected_Result_Number and \
		   this.Eightyfour = Expected_Result_Number then
		
		   [] = RPT2:Test_Passed["this and control data match", Local_Test_Number, 0]
		
		else
		
		   [] = RPT3:Test_Failed["this and control data do not match", Local_Test_Number, 0]
		
		endif
		
		Local_Test_Number = Local_Test_Number + 1
		
		# Update the test number so that the result of the next generation
		# has it's own test number, and pass through the instance handle of the big object
		# that has so far been woefully ignored.
		
		generate objBIG4:To_Next_Stage (Big_IH, Local_Test_Number) to this
		@endnoparse
	end state;

	state Complete is
		@noparse
		[] = RPT5:Test_Text[this.One, "Generating into termination state now"]
		
		
		[] = ASL_Mapping4::Delete_Report_Data[]
		
		delete this
		@endnoparse
	end state;

	state Next_Stage(Big_IH: in instance of BIG_Object, Next_Test_Number: in integer) is
		@noparse
		# ###########################################################################
		
		[] = RPT1:Start_Test[Next_Test_Number, "Null Requid", "ASL Mapping", "Big Object", "Compare control IH and this"]
		
		# Compare the attributes of this to the control IH
		
		if this.One !=  Big_IH.One and \
		   this.Forty != Big_IH.Forty and \
		   this.Eightyfour != Big_IH.Eightyfour then
		
		   [] = RPT2:Test_Passed["this & control IH do not match", Next_Test_Number, 0]
		
		else
		
		   [] = RPT3:Test_Failed["this & control IH match", Next_Test_Number, this.Eightyfour]
		
		endif
		
		generate objBIG2:To_Complete() to this
		@endnoparse
	end state;

end;

// BP 7.1.6 content: Component syschar: 3 persistence-version: 7.1.6

within ASL_Mapping::ASL_Mapping is

	//!  This domain deals with the basic ASL process modelling. It does not require the creation of instances, relationships or event mechanisms. It does require and use domain & object based functions.
	@key_letters("ASL_Mapping");
	component ASL_Mapping is
		
		package ASL_Mapping;
		package functions;
		package scenarios;
		package types;
		
		@informal_name("Unnamed_Interface");
		provided port ASL_Mapping implements ASL_Mapping is

			message And_Or_Checks(Test_No: in integer, Returning_No: out integer) return void to provider;

			message Check_Base_Types(Test: in integer, Returning_No: out integer) return void to provider;

			message Check_Continuation(Test_No: in integer, Returning_No: out integer) return void to provider;

			message Check_Defaults(Test: in integer, Returning_No: out integer) return void to provider;

			message Check_Identifiers(Test_No: in integer, Returning_No: out integer) return void to provider;

			message Check_Parameters(Test: in integer, The_Subtract_Param: in integer, Returning_No: out integer) return void to provider;

			message Comment_Checks(Test_No: in integer, Returning_No: out integer) return void to provider;

			message Create_Processor(Test_Start: in integer, Processor_Id_Local: in Processor_Id_Type, Final_Test: out integer) return void to provider;

			message Create_Report_Data() return void to provider;

			message Delete_Report_Data() return void to provider;

			message Perform_Attribute_Assignment(Test_Start: in integer, Final_Test: out integer) return void to provider;

			message Test_Large_Numbers(Start_Test_Number: in integer, Finish_Test_Number: out integer) return void to provider;

			message Test_Unfeasibly_Large_Object(Start_Test_Number: in integer, Finish_Test_Number: out integer) return void to provider;

			message basic_asl_divide_by_zero(Test_Start: in integer, Final_Test: out integer) return void to provider;

			message basic_asl_enumeration(Test_Start: in integer, Final_Test: out integer) return void to provider;

		end port;

		//! Terminator stub for report domain
		@key_letters("RPT");
		@informal_name("Unnamed_Interface");
		required port Report_Result implements ASL_MappingReport_Result is

			@dialect("asl");
			@message_num(7);
			message Domain_Test_Finished(This_Domain_Name: in string) return void to provider;

			@dialect("asl");
			@message_num(6);
			message Domain_Test_Start(This_Domain_Name: in string) return void to provider;

			@dialect("asl");
			@message_num(8);
			message Specify_Requid(Requid_Test_Number: in integer, The_Requid_Itself: in string) return void to provider;

			@dialect("asl");
			@message_num(1);
			message Start_Test(Test_Number: in integer, Requid: in string, Invoking_Domain: in string, Invoking_Object: in string, Purpose: in string) return void to provider;

			@dialect("asl");
			@message_num(3);
			message Test_Failed(Failed_Domain_Object: in string, Failed_Test_Number: in integer, Failed_Test_Value: in integer) return void to provider;

			@dialect("asl");
			@message_num(2);
			message Test_Passed(Test_Object_Domain: in string, Test_Number: in integer, Test_Value: in integer) return void to provider;

			@dialect("asl");
			@message_num(5);
			message Test_Text(Test_Number: in integer, Free_Text: in string) return void to provider;

			@dialect("asl");
			@message_num(4);
			message Test_Unsupported(Unsupported_Test_Number: in integer) return void to provider;

		end port;

		@key_letters("WAW");
		@informal_name("Unnamed_Interface");
		required port Where_Are_We implements ASL_MappingWhere_Are_We is

			@dialect("asl");
			@message_num(1);
			message What_Env(Env_Text: out string) return void to provider;

		end port;

	end component;

end;
